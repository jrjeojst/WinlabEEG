
/*******************************
+ Reading USB Data
+ William Pan
+ May be used for any purpose.
+*******************************/

/* Linux */
#include <linux/types.h>
#include <linux/input.h>
#include <linux/hidraw.h>

/* Unix */
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

/* C */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>

/* Libudev */
#include <libudev.h>
#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <unistd.h>


#ifndef HIDIOCSFEATURE
#define HIDIOCSFEATURE(len)    _IOC(_IOC_WRITE|_IOC_READ, 'H', 0x06, len)
#define HIDIOCGFEATURE(len)    _IOC(_IOC_WRITE|_IOC_READ, 'H', 0x07, len)
#endif


const char *bus_str(int bus);

int main(int argc, char **argv)
{
	
	int fd;
	//Open the Device with non-blocking reads. In real life,
	//   don't use a hard coded path; use libudev instead. 
	struct udev_device *dev;
	struct udev *udev;
	struct udev_list_entry *devices, *dev_list_entry;
	struct udev_enumerate *enumerate;
	
	udev = udev_new();

	enumerate = udev_enumerate_new(udev);
	udev_enumerate_add_match_subsystem(enumerate, "hidraw");
	udev_enumerate_scan_devices(enumerate);
	devices = udev_enumerate_get_list_entry(enumerate);

	udev_list_entry_foreach(dev_list_entry, devices) {
	const char * path = udev_list_entry_get_name(dev_list_entry);

	dev = udev_device_new_from_syspath(udev,path);


		/* usb_device_get_devnode() returns the path to the device node
		   itself in /dev. */

	//printf("Device Node Path: %s\n", udev_device_get_devnode(dev));
	//printf("path: %s\n", path);
	}


	
	fd = open(udev_device_get_devnode(dev), O_RDONLY);
	
	/******************************************************
	struct udev_device *dev;
	const char *path;
	path = udev_list_entry_get_name(dev_list_entry);
	dev = udev_device_new_from_syspath(udev, path);
	int fd = open( udev_device_get_devnode(dev), O_RDWR|O_NONBLOCK);
	//******************************************************/

	if (fd > 0) {
		int i, res, desc_size = 0;
		char buf[256];
		struct hidraw_report_descriptor rpt_desc;
		struct hidraw_devinfo info;

		memset(&rpt_desc, 0, sizeof(rpt_desc));
		memset(&info, 0xff, sizeof(info));
		memset(buf, 0x0, sizeof(buf));
		
		/* Get Report Descriptor Size *///////////////////
		/*
		res = ioctl(fd, HIDIOCGRDESCSIZE, &desc_size);
		if (res < 0)
			perror("HIDIOCGRDESCSIZE");
		else {
			printf("Report Descriptor Size: %d\n", desc_size);
		}
		*/
		/* Get Report Descriptor *//////////////////////
		/*
		rpt_desc.size = desc_size;
		res = ioctl(fd, HIDIOCGRDESC, &rpt_desc);
		if (res < 0)
			perror("HIDIOCGRDESC");
		else {
			printf("Report Descriptor:\n");
			for (i = 0; i < rpt_desc.size; i++) {
				printf("%hhx ", rpt_desc.value[i]);
			}
			puts("\n");
		}
		*/
		/* Get Raw Name */
		res = ioctl(fd, HIDIOCGRAWNAME(256), buf);
		if (res < 0)
			perror("HIDIOCGRAWNAME");
		else {
			printf("Raw Name: %s\n", buf);
		}

		/* Get Physical Location */
		res = ioctl(fd, HIDIOCGRAWPHYS(256), buf);
		if (res < 0)
			perror("HIDIOCGRAWPHYS");
		else {
			printf("Raw Phys: %s\n", buf);
		}

		/* Get Raw Info */
		res = ioctl(fd, HIDIOCGRAWINFO, &info);
		if (res < 0)
			perror("HIDIOCGRAWINFO");
		else {
			printf("Raw Info:\n");
			printf("\tbustype: %d (%s)\n", info.bustype, bus_str(info.bustype));
			printf("\tvendor: 0x%04hx\n", info.vendor);
			printf("\tproduct: 0x%04hx\n", info.product);
		}

		/* Get a report from the device */
		/*
		while(1){
		res = read(fd, buf, 16);
	
		
		if (res < 0) {
			perror("read");
			continue;
		}
		else {
			printf("read() read %d bytes:\n\t", res);
			for (i = 0; i < res; i++) {
				printf("%hhx ", buf[i]);
			}
			puts("\n");
		}
		}
		*/
		res = read(fd, buf, 32);
		if(res < 0) {perror("read");}
		else {
			printf("read() read %d bytes: \n",res);
			while(1)
			{
				printf("\t");
				for (i = 0; i < res; i++) 
				{
					printf("%hhx ", buf[i]);
				}
			puts("\n");
			res = read(fd, buf, 32);
			}

		}
		close(fd);
	}
	else {
		perror("Unable to open device");
	}
	return 0;
}

const char *
bus_str(int bus)
{
	switch(bus) {
	case BUS_USB:
		return "USB";
		break;
	case BUS_HIL:
		return "HIL";
		break;
	case BUS_BLUETOOTH:
		return "Bluetooth";
		break;
	case BUS_VIRTUAL:
		return "Virtual";
		break;
	default:
		return "Other";
		break;
	}
}
